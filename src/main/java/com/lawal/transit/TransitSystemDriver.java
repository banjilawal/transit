package com.lawal.transit;

import com.lawal.transit.infrastructure.block.Block;
import com.lawal.transit.common.build.TransitSystemBuilder;
import com.lawal.transit.infrastructure.avenue.Avenue;
import com.lawal.transit.infrastructure.catalog.*;
import com.lawal.transit.infrastructure.house.House;
import com.lawal.transit.infrastructure.junction.Junction;
import com.lawal.transit.graph.search.StationSearch;
import com.lawal.transit.infrastructure.station.Station;
import com.lawal.transit.infrastructure.street.Street;

import java.util.Queue;
import java.util.Set;


public class TransitSystemDriver {

    public static void main(String[] args) throws Exception {
        TransitSystemBuilder.INSTANCE.run();
        Street street = StreetCatalog.INSTANCE.findById(1L);
        Avenue avenue = AvenueCatalog.INSTANCE.findById(1L);
        Junction junction = JunctionCatalog.INSTANCE.findById(1L);

        Set<Station> disconnectedStations = StationCatalog.INSTANCE.getDisconnectedStations();

        System.out.println("Summary of Transit System Generated by COMPAS");
        System.out.println("-----------------------------------------------");
        System.out.println("number of stations:" + StationCatalog.INSTANCE.size());
        System.out.println("Max Station density:" + TransitSystemBuilder.MAX_STATION_DENSITY);
        System.out.println("Number of blocks:" + BlockCatalog.INSTANCE.size());
        System.out.println("Number of Streets:" + StreetCatalog.INSTANCE.size());
        System.out.println("Number of Avenues:" + AvenueCatalog.INSTANCE.size());
        System.out.println("Number of Junctions:" + JunctionCatalog.INSTANCE.size());
        System.out.println("Number of Bus Routes:" + TransitRouteCatalog.INSTANCE.size());
        System.out.println("Number of disconnected stations:" + disconnectedStations.size());

        for (Station station : disconnectedStations) {
            System.out.println("disconnected station:" + station
                + " incoming:" + station.getIncomingEdges().size()
                + " outgoing:" + station.getOutgoingEdges().size()
            );
        }
        System.out.println("-----------------------------------------------\n");




        House source = HouseCatalog.INSTANCE.randomHouse();
        House destination = HouseCatalog.INSTANCE.randomHouse();

        System.out.println("Testing Nearest Station Discovery with Randomly Selected Source and Destination Addresses");
        System.out.println("------------------------------------------------------------------------------------------");
        System.out.println("Randomly Selected Source Address:" + source);
        System.out.println("Randomly Selected Destination Address:" + destination);


        Queue<Block> sourceStationPath = StationSearch.search(source);
        System.out.println("------------------------------------------------------");
        System.out.println("Finding Closest station to source address" + source);
        System.out.println("------------------------------------------------------");

        Station station = null;

        int i = 1;
        System.out.println("\nFinding Closest station to destination address" + destination);
        for(Block block : sourceStationPath) {
            System.out.println("hop count:" + i + " " + block + block.getStation());
            if (block.getStation() != null) station = block.getStation();
            i++;

        }
        System.out.println("Size of path to embarkation from source:" + sourceStationPath.size());

        if (station != null) {
            System.out.println("\nRoutes you can catch from station " + station);
            System.out.println(station.getRouteNames());
        }

        System.out.println("Size of path from disembarkation to destination:" + StationSearch.search(destination).size());


        Queue<Block> destinationStationPath = StationSearch.search(destination);
        System.out.println("------------------------------------------------------");
        System.out.println("Finding Closest station to destination address" + destination);
        System.out.println("------------------------------------------------------");

        i = 0;
        for(Block block : sourceStationPath) {
            System.out.println("hop count:" + i + " " + block + block.getStation());
            if (block.getStation() != null) station = block.getStation();
            i++;
        }
        System.out.println("Size of path from disembarkation to destination:" + destinationStationPath.size());
        if (station != null) {
            System.out.println("\nRoutes you can catch from station " + station);
            System.out.println(station.getRouteNames());
        }


    }
}